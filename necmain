if not game.Loaded then game.Loaded:Wait() end
shared.Debugging = false
local script = game:GetService("CoreGui").NotEnoughCommands.DummyMain
local UI = script.Parent
local Main = UI.Main
local Notification = Main.Notification
local Welcome =  Main.Welcome
local Tab1 = Main.Tab1
local Players = game:GetService("Players")
local Player = Players.LocalPlayer
local TweenService = game:GetService("TweenService")
local MatchInfo = TweenInfo.new(0.5, Enum.EasingStyle.Back, Enum.EasingDirection.Out, 0, false, 0)
local ToolInfo = TweenInfo.new(1, Enum.EasingStyle.Back, Enum.EasingDirection.Out, 0, false, 0)
local MatchUi = Main.Match
local SettingsOpen = false
local Goals = {
	OutGoal = {Position = UDim2.new(0.5, 235,1, -30)},
	InGoal = {Position = UDim2.new(0.5, -21,1, -30)},
	NotifyOutGoal = {Position = UDim2.new(0.5, -235,1, -60)},
	NotifyInGoal = {Position = UDim2.new(0.5, -235,1, -30)},
	SettingsOutGoal = {Position = UDim2.new(0.5, -381,1, -30)},
	SettingsInGoal = {Position = UDim2.new(0.5, -235,1, -30)}
}
local Out = TweenService:Create(MatchUi, MatchInfo, Goals.OutGoal)
local In = TweenService:Create(MatchUi, MatchInfo, Goals.InGoal)
local NotifyOut = TweenService:Create(Notification, MatchInfo, Goals.NotifyOutGoal)
local NotifyIn = TweenService:Create(Notification, MatchInfo, Goals.NotifyInGoal)
local SettingsOut = TweenService:Create(Tab1, ToolInfo, Goals.SettingsOutGoal)
local SettingsIn = TweenService:Create(Tab1, ToolInfo, Goals.SettingsInGoal)
local UiS = game:GetService("UserInputService")
local CommandBox = Main.CommandBox
Welcome.Text = "Welcome, <b>"..Player.Name.."</b>."
local CurrentPart:BasePart = nil
local SelectionBox = Instance.new("SelectionBox", workspace)
local RunService = game:GetService("RunService")
local SelectedParts = {}
local Connections = {}
local FloatPart = Instance.new("Part")
FloatPart.Anchored = true
FloatPart.Size = Vector3.new(4, 1, 4)
FloatPart.Transparency = 1
FloatPart.Parent = workspace
local GlobalFunctions = {
	Notify = function(Text:string, Duration:number)
		Notification.Text = Text
		print(Notification.Text, Text)
		NotifyOut:Play()
		task.wait(Duration)
		Notification.Text = ""
		NotifyIn:Play()
	end,
}
local Mouse = Player:GetMouse()
local Commands; Commands = {
	{
		Name = "destroypart",
		Aliases = {"dp"},
		Function = function()
			if CurrentPart then CurrentPart:Destroy() end
		end,
	},
	{
		Name = "destroyparts",
		Aliases = {"dps"},
		Function = function()
			for _, Part:BasePart in ipairs(SelectedParts) do
				Part:Destroy()
			end
		end,
	},
	{
		Name = "clearparts",
		Aliases = {"cp"},
		Function = function()
			table.clear(SelectedParts)
		end,
	},
	{
		Name = "networkowner",
		Aliases = {"owner"},
		Function = function(Caller)
			settings().Physics.AllowSleep = false
			RunService.RenderStepped:Connect(function()
				sethiddenproperty(Caller, "MaximumSimulationRadius", math.pow(math.huge, math.huge))
				sethiddenproperty(Caller, "SimulationRadius", math.huge*math.huge)
			end)
		end,
	},
	{
		Name = "drophandle",
		Aliases = {"dh"},
		Function = function(Caller, Keep)
			local Character:Model = Caller.Character
			local Tool = Character:FindFirstChildWhichIsA("Tool")
			for _, Weld:Weld in ipairs(Tool:GetDescendants()) do
				if Weld:IsA("Weld") or Weld:IsA("ManualWeld") or Weld:IsA("WeldConstraint") then
					Weld:Destroy()
				end
			end
			Tool.Handle.CFrame = CFrame.new(math.huge, math.huge, math.huge)
			if Keep == "true" then Tool.Handle.Parent = Caller else Tool.Handle.Parent = workspace end
		end,
	},
	{
		Name = "toolhead",
		Aliases = {"th"},
		Function = function(Caller)
			local Character = Caller.Character
			local BodyPos = Instance.new("BodyPosition")
			BodyPos.D = 100
			BodyPos.MaxForce = Vector3.new(math.huge, math.huge, math.huge)
			local Tool = Character:FindFirstChildWhichIsA("Tool")
			BodyPos.Parent = Tool.Handle
			for _, Weld:Weld in ipairs(Character:GetDescendants()) do
				if Weld:IsA("Weld") or Weld:IsA("ManualWeld") or Weld:IsA("WeldConstraint") then
					Weld:Destroy()
				end
			end
			Tool.Parent = workspace
			RunService.RenderStepped:Connect(function()
				BodyPos.Position = Character.PrimaryPart.Position
			end)
		end,
	},
	{
		Name = "blockhead",
		Aliases = {"bh"},
		Function = function(Caller)
			local Character = Caller.Character
			Character.Head.Mesh:Destroy()
		end,
	},
	{
		Name = "faceless",
		Aliases = {"fc"},
		Function = function(Caller)
			local Character = Caller.Character
			Character.Head.face:Destroy()
		end,
	},
	{
		Name = "blockhats",
		Aliases = {"bhs"},
		Function = function(Caller)
			local Character:Model = Caller.Character
			for _, Mesh:SpecialMesh in ipairs(Character:GetDescendants()) do
				if Mesh:IsA("SpecialMesh") then
					Mesh:Destroy()
				end
			end
		end,
	},
	{
		Name = "freeze",
		Aliases = {"fr"},
		Function = function(Caller, Plr)
			workspace:FindFirstChild(Plr).PrimaryPart.Anchored = true
		end,
	},
	{
		Name = "delethuman",
		Aliases = {"dhu"},
		Function = function(Caller)
			local Character = Caller.Character
			Character.Humanoid:Destroy()
		end,
	},
	{
		Name = "rotato",
		Aliases = {"rt"},
		Function = function(Caller)
			local Character = Caller.Character
			Connections["rotato"] = RunService.RenderStepped:Connect(function(dt)
				Character.HumanoidRootPart.CFrame = CFrame.Angles(dt, dt, dt)
			end)
		end,
	},
	{
		Name = "unrotato",
		Aliases = {"unrt"},
		Function = function(Caller)
			Connections["rotato"]:Disconnect()
		end,
	},
	{
		Name = "noclip",
		Aliases = {"nc"},
		Function = function(Caller)
			local Character = Caller.Character
			Connections["noclip"] = RunService.Stepped:Connect(function()
				Character.HumanoidRootPart.CanCollide = false
				Character.Head.CanCollide = false
				Character.Torso.CanCollide = false
			end)
		end,
	},
	{
		Name = "unnoclip",
		Aliases = {"unnc"},
		Function = function(Caller)
			Connections["noclip"]:Disconnect()
		end,
	},
	{
		Name = "notify",
		Aliases = {"ny"},
		Function = function(Caller, Text, Duration)
			GlobalFunctions.Notify(Text, tonumber(Duration))
		end,
	},
	{
		Name = "spasm",
		Aliases = {"sp"},
		Function = function(Caller)
			local Character = Caller.Character
			local RNum
			Connections["spasm"] = RunService.RenderStepped:Connect(function() 
				RNum = math.random(0, 3)
				Character.HumanoidRootPart:ApplyImpulseAtPosition(Vector3.new(50, 50, 50), Vector3.new(RNum*50, RNum*50, RNum*50))
				if RNum == 2 then 
					Character.Humanoid.Sit = false
					Character.Humanoid.Jump = true
				else
					Character.Humanoid.Sit = true
					Character.Humanoid.Jump = false
				end
			end)
		end,
	},
	{
		Name = "unspasm",
		Aliases = {"unsp"},
		Function = function()
			Connections["spasm"]:Disconnect()
		end,
	},
	{
		Name = "float",
		Aliases = {"fl"},
		Function = function(Caller)
			local Character = Caller.Character
			Connections["float"] = RunService.Heartbeat:Connect(function()
				FloatPart.CFrame = Character.HumanoidRootPart.CFrame * CFrame.new(0, -3.5, 0)
			end)
			Connections["floatinput"] = UiS.InputBegan:Connect(function(input, chatting)
				if chatting then return end
				if input.KeyCode == Enum.KeyCode.Q then
					FloatPart.CFrame = Character.HumanoidRootPart.CFrame * CFrame.new(0, -1, 0)
				elseif input.KeyCode == Enum.KeyCode.E then
					FloatPart.CFrame = Character.HumanoidRootPart.CFrame * CFrame.new(0, 2, 0)
				end
			end)
		end,
	},
	{
		Name = "unfloat",
		Aliases = {"unfl"},
		Function = function()
			Connections["float"]:Disconnect()
			Connections["floatinput"]:Disconnect()
		end,
	},
	{
		Name = "sit",
		Aliases = {"s"},
		Function = function(Caller)
			local Character = Caller.Character
			Character.Humanoid.Sit = true
		end,
	},
	{
		Name = "fixmain",
		Aliases = {"fm", "repairmain", "rm"},
		Function = function(Caller:Player)
			local tool = Caller.Backpack:FindFirstChildWhichIsA("Tool")
			if tool then
				tool.Parent = nil
				tool.Parent = Caller.Backpack
			end
		end,
	}
}
local function FindCMD(Name:string)
	for _, Value in ipairs(Commands) do
		if shared.Debugging then print(Value, Value.Name, Value.Aliases, Value.Function) end
		if Value.Name == Name:lower() or table.find(Value.Aliases, Name:lower()) then
			return Value.Function
		end
	end
end
local function Match(str:string)
	for _, Value in pairs(Commands) do
		if Value and Value.Name:find(str) or Value.Aliases[str] then
			return Value
		end
	end
end

local Connection; Connection = CommandBox.FocusLost:Connect(function(Enter)
	if Enter and #CommandBox.Text:split(" ") > 0 then
		local Split = CommandBox.Text:split(" ")
		local Command = FindCMD(Split[1])
		if shared.Debuggin then print(Command, Split) end
		if Command then
			In:Play()
			CommandBox.Text = ""
			Command(Player, unpack(Split, 2))
		end
		--Connection:Disconnect()
	end
end)

local Connection1; Connection1 = CommandBox:GetPropertyChangedSignal("Text"):Connect(function()
	if #CommandBox.Text:split("") > 0 and Match(CommandBox.Text)  then
		Out:Play()
		MatchUi.Text = Match(CommandBox.Text).Name
	elseif #CommandBox.Text:split("") <= 1 then
		In:Play()
		CommandBox.Text = ""
	end
end)

local Connection2; Connection2 = UiS.InputBegan:Connect(function(Input, Chatting)
	if Chatting then return end
	if Input.KeyCode == Enum.KeyCode.Semicolon then
		CommandBox:CaptureFocus()
	elseif Input.UserInputType == Enum.UserInputType.MouseButton3 and Mouse.Target then
		CurrentPart = Mouse.Target
		if not table.find(SelectedParts, Mouse.Target) then
			table.insert(SelectedParts, Mouse.Target)
		end
		SelectionBox.Adornee = Mouse.Target
	elseif Input.KeyCode == Enum.KeyCode.F2 then
		if not SettingsOpen  then
			SettingsOpen = true
			SettingsOut:Play()
		else
			SettingsOpen = false
			SettingsIn:Play()
		end
	end
end)

local Connection3; Connection3 = MatchUi.Activated:Connect(function()
	CommandBox.Text = MatchUi.Text
end)

Player.Backpack.ChildAdded:Connect(function(Child)
	if Child:IsA("Tool") then
		TweenService:Create(Main, ToolInfo, {Position = UDim2.new(0.5, -235,0.803, -30)}):Play()
		Goals.OutGoal = {Position = UDim2.new(0.5, 235,0.803, -30)}
		Goals.InGoal ={Position = UDim2.new(0.5, -21,0.803, -30)}
		Goals.NotifyOutGoal = {Position = UDim2.new(0.5, -235,0.803, -60)}
		Goals.NotifyInGoal = {Position = UDim2.new(0.5, -235,0.803, -30)}
		Goals.SettingsOutGoal = {Position = UDim2.new(0.5, -381,1, -30)}
		Goals.SettingsInGoal = {Position = UDim2.new(0.5, -235,1, -30)}
	end
end)

Player.Backpack.ChildRemoved:Connect(function(Child)
	if Child:IsA("Tool") and not Player.Character:FindFirstChildWhichIsA("Tool") then
		TweenService:Create(Main, ToolInfo, {Position = UDim2.new(0.5, -235,1, -30)}):Play()
		Goals.OutGoal = {Position = UDim2.new(0.5, 235,1, -30)}
		Goals.InGoal = {Position = UDim2.new(0.5, -21,1, -30)}
		Goals.NotifyOutGoal = {Position = UDim2.new(0.5, -235,1, -60)}
		Goals.NotifyInGoal = {Position = UDim2.new(0.5, -235,1, -30)}
		Goals.SettingsOutGoal = {Position = UDim2.new(0.5, -381,1, -30)}
		Goals.SettingsInGoal = {Position = UDim2.new(0.5, -235,1, -30)}
	end
end)
